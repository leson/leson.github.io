(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{455:function(a,e,t){"use strict";t.r(e);var s=t(14),n=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"基础知识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础知识"}},[a._v("#")]),a._v(" 基础知识")]),a._v(" "),t("h2",{attrs:{id:"变量及基础数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量及基础数据结构"}},[a._v("#")]),a._v(" 变量及基础数据结构")]),a._v(" "),t("h3",{attrs:{id:"自定义变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义变量"}},[a._v("#")]),a._v(" 自定义变量")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('x=5         #定义变量 \n$x          #引用变量\necho $x     #显示变量\n"$PATH":/home/abc/software  #变量拼接\n\n#运算 ：let [] (()) \nlet no1++ ; \nlet no2+=3; \nlet result=no1+no2; \nno2=$[ no2 + 1 ]; \nresult1=$(( no1+no2+3 )); #推荐这种用法\n\ndeclare -i xxx #将xxx 定义成integer \n-x  #将变量定义成环境变量。等同export var="abc"\n\n')])])]),t("h3",{attrs:{id:"环境变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#环境变量"}},[a._v("#")]),a._v(" 环境变量")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('#path\necho $PATH \n#PS1 \necho "$PS1,$PS2,$PS4"\n')])])]),t("h3",{attrs:{id:"位置参数变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#位置参数变量"}},[a._v("#")]),a._v(" 位置参数变量")]),a._v(" "),t("blockquote",[t("p",[t("strong",[a._v("$n")]),a._v(" : n 为数字，$0代表命令本身， $1-$9代表第一到第九个参数，如果十个以上的参数需要用大括号，如 ${10}.")])]),a._v(" "),t("blockquote",[t("p",[t("strong",[a._v("$")]),a._v("* : 这个变量代表命令行中的所有参数，$*把所有的参数年成一个整体。")])]),a._v(" "),t("blockquote",[t("p",[t("strong",[a._v("$@")]),a._v(" : 这个变量也代表命令行中所有的参数，不过$@把每个参数区分对待。")])]),a._v(" "),t("blockquote",[t("p",[t("strong",[a._v("$#")]),a._v(" : 这个变量代表命令行中参数的个数。")])]),a._v(" "),t("h3",{attrs:{id:"预定义变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#预定义变量"}},[a._v("#")]),a._v(" 预定义变量")]),a._v(" "),t("blockquote",[t("p",[t("strong",[a._v("$?")]),a._v(" : 最后一次执行的命令的返回状。0为正确执行，非0为执行不正确。")])]),a._v(" "),t("blockquote",[t("p",[t("strong",[a._v("$$")]),a._v(" : 当前进程 的进程号（PID）")])]),a._v(" "),t("blockquote",[t("p",[t("strong",[a._v("$!")]),a._v(" : 后台运行的最后一个进程的进程号（PID）")])]),a._v(" "),t("h3",{attrs:{id:"数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[a._v("#")]),a._v(" 数组")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("a=()            #定义\na[0] = 5        #赋值\necho ${#a[@/*]} #读取a数组长度\n${a[0]}         #取数组内容,下标对应的值\n${a[*]},${a[@]} #取数组全部内容。\n${a[@]:0:3}     #数组分片 ${a[@/*]:起始位置:长度} \n${a[@]/helo/hello}  #替换:${a[@/*]/查找字符/替换字符}\n\n")])])]),t("h3",{attrs:{id:"关联数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关联数组"}},[a._v("#")]),a._v(" 关联数组")]),a._v(" "),t("blockquote",[t("p",[a._v("只有在bash 4.0 以上版本才有效("),t("code",[a._v("bash --version")]),a._v(")")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('#定义\ndeclare -A a=(["key1"]="hello" ["key2"]="world") \n#赋值\na["key3"]="a bit difference"   \n#读取所有键\necho ${!a[*/@]}\n#读取所有值\necho ${a[@/*]}\n#根据键读取值\necho ${a[key3]}\n\n#遍历数组(key和value)\nfor key in ${!a[@]}\ndo\n    echo "key=[$key];value=[${a[$key]}]"\ndone\n\n\n')])])]),t("h3",{attrs:{id:"变量内容的删除、取代与替换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量内容的删除、取代与替换"}},[a._v("#")]),a._v(" 变量内容的删除、取代与替换")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("echo ${PATH#/*:} #变量从左向右删除匹配的最短要求\n\necho ${PATH##/*:} #变量从左到右删除匹配的最长要求 （贪婪模式）\necho ${PATH%/*:} #变量从右到左删除匹配的最短要求\n\necho ${PATH%%/*:} #变量从右到左删除匹配的最长要求（贪婪模式）\n\necho ${PATH/home/HOME} #变量从左到右替换匹配的第一个\n\necho ${PATH//home/HOME} #变量从左到右替换所有匹配到的（贪婪模式）\n")])])]),t("h2",{attrs:{id:"流程控制语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#流程控制语句"}},[a._v("#")]),a._v(" 流程控制语句")]),a._v(" "),t("h3",{attrs:{id:"if-判断语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#if-判断语句"}},[a._v("#")]),a._v(" if 判断语句")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#结构如下：\nif [ 条件 ];then\n    #do something\nfi \n")])])]),t("p",[a._v("==注意：‘[’前后均必须加空格,变量如要保证为空及含空格的多个单词时不出错就要加双引号.==")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('if [ "$aa" = "aa" -a "$bb" = "bb" ] || [ "$cc" = "cc" -a "$dd" = "dd" ]; then\nif [[ $1 != "" && $# -eq 1 ]]; then\n')])])]),t("blockquote",[t("p",[a._v("数值判断")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("-eq (equal) \n-ne (not equal) \n-lt (less than) \n-gt (grant than) \n-ge (grant equal) \n-le (less equal)\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('$A="aa" $?=0 $#=4\n')])])]),t("blockquote",[t("p",[a._v("字符判断 -z (zero 空为真) -n （not 非空为真）")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('[ -z "" ] && echo "yes" || echo "no"\n')])])]),t("blockquote",[t("p",[a._v("文件类型判断")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('-b : 是块设备文件为真（block）\n-c : 是字符设备文件为真（char）\n-L : 是符号连接文件为真(link)\n-d : 是目录为真（Directory） \n-e : exist 文件存在为真(exist)。\n-s : 文件存在且内容非空为真。\n-S : 是套接字文件为真（socket）。\n-f : 是普通文件为真\n\n[ -e /root/vicky/abc.log ] && echo "exist file" || echo "not exist file"\n')])])]),t("blockquote",[t("p",[a._v("文件权限判断")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("-r : 文件有读权限为真（read）\n-w : 文件有写权限为真(write)\n-x : 文件有可执行权限为真（execute）\n-u : 文件有suid 权限为真\n-g ： 文件有sgid 权限为真\n-k ： 文件有sbit 权限为真。\n")])])]),t("blockquote",[t("p",[a._v("多重条件判断")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("-a : and\n-o: or\n! : 非\n")])])]),t("h3",{attrs:{id:"for-循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for-循环"}},[a._v("#")]),a._v(" for 循环")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('for file in $(ls ./) \ndo \n    echo "this my $file"; \ndone \n-----------------------------\nsum=0\nfor (( i=1;i<=100;i=i+1 ))\ndo\n    sum=$(( $sum+$i ))\ndone\n\n')])])]),t("h3",{attrs:{id:"while-循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#while-循环"}},[a._v("#")]),a._v(" while 循环")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("while [ $i -le 100 ]\ndo\n    #do smthing\ndone\n-------------------------\nwhile read line\ndo\n    echo $line\ndone < test.txt\n")])])]),t("h3",{attrs:{id:"case-esac"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#case-esac"}},[a._v("#")]),a._v(" case esac")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('case "$1" in\nstart)\n    echo "start……"\n    ;;\nstop)\n    echo "stop……"\n    ;;\n*)\n    echo "Usage: $0 {start|stop}"\n    exit 2\nesac\n')])])]),t("h1",{attrs:{id:"正则表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[a._v("#")]),a._v(" 正则表达式")]),a._v(" "),t("h2",{attrs:{id:"通配符与正则表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通配符与正则表达式"}},[a._v("#")]),a._v(" 通配符与正则表达式")]),a._v(" "),t("h2",{attrs:{id:"通配符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通配符"}},[a._v("#")]),a._v(" 通配符")]),a._v(" "),t("blockquote",[t("p",[a._v("* : 匹配任意内容")])]),a._v(" "),t("blockquote",[t("p",[a._v("? : 匹配任意一个内容")])]),a._v(" "),t("blockquote",[t("p",[a._v("[] : 匹配中括号中的一个字符")])]),a._v(" "),t("h2",{attrs:{id:"基础正则表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础正则表达式"}},[a._v("#")]),a._v(" 基础正则表达式")]),a._v(" "),t("blockquote",[t("p",[a._v("* ： 前一个字符匹配0次或任意多次。")])]),a._v(" "),t("blockquote",[t("p",[a._v(". : 匹配除了换行符（\\n）外任意一个字符。")])]),a._v(" "),t("blockquote",[t("p",[a._v("^ : 匹配行首。如:^hello 会匹配以hello 开头的行。")])]),a._v(" "),t("blockquote",[t("p",[a._v("$ : 匹配行尾。 如:hello$ 会匹配以hello 结尾的行。")])]),a._v(" "),t("blockquote",[t("p",[a._v("[] : 匹配中括号中指定的任意一个字符，只匹配一个字符。[a-z][0-9] 匹配小写字符和一位数字构成的两位字符。")])]),a._v(" "),t("blockquote",[t("p",[a._v("[^] : 匹配中括号的字符以外的任意一个字符。如：[^0-9] 匹配任意一位非数字字符。")])]),a._v(" "),t("blockquote",[t("p",[a._v("\\ : 转义符。去除符号的特殊用法。")])]),a._v(" "),t("blockquote",[t("p",[a._v("{n} ： 表示其前面的字符恰好出现n次。如：[0-9]{4} 匹配4位数字。")])]),a._v(" "),t("blockquote",[t("p",[a._v("{n,} : 表示其前面的字符出现不小于n次。")])]),a._v(" "),t("blockquote",[t("p",[a._v("{n,m} : 表示其前面的字符至少出现n次，最多出现m次。如：[a-z]{6,8} 匹配6到8位的小写字符。")])]),a._v(" "),t("p",[a._v("==注：以上三个大括号的用法其实要有定界符才能准确匹配，否则光看概念，与实际是有区别的。==")]),a._v(" "),t("h1",{attrs:{id:"其它"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其它"}},[a._v("#")]),a._v(" 其它")]),a._v(" "),t("blockquote",[t("p",[a._v("脚本中的语句不是在当前shell 进程 中执行的。")])]),a._v(" "),t("blockquote",[t("p",[a._v("这种方式可以将参数统一写到一个sh中，在另外一个shell 脚本 中引用 。")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('#变量设置成全局变量\nexport a="aaa"\ndeclare -x a="aaa"\n\n#将其它文件包含到当前进程。\n. test.sh\nsource test.sh \n')])])]),t("h2",{attrs:{id:"同时执行多个脚本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#同时执行多个脚本"}},[a._v("#")]),a._v(" 同时执行多个脚本")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#第一个命令成功则执行第二个命令\n./hello.sh && ./world.sh \n\n#第一个命令失败则执行第二个命令\n./hello.sh || ./world.sh\n\n#常用综合用法\nls oklar && echo yes || echo no\n")])])]),t("h2",{attrs:{id:"shell-调试-debug"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shell-调试-debug"}},[a._v("#")]),a._v(" "),t("a",{attrs:{href:"https://github.com/leson/guides/blob/master/linux/shell_debug.md",target:"_blank",rel:"noopener noreferrer"}},[a._v("shell 调试(debug)"),t("OutboundLink")],1)]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('sh -x aaa.sh\n\n#还可以设置PS4让调试代码显示行号$LINENO\nexport PS4="+[${LINENO}] "\n')])])]),t("h2",{attrs:{id:"进程间通信"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程间通信"}},[a._v("#")]),a._v(" 进程间通信")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#pipe line (同一个父进程)\n#name pipe (不同父进程)\n\nmkfifo fifo\n")])])]),t("h2",{attrs:{id:"一些规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一些规则"}},[a._v("#")]),a._v(" 一些规则")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$(command) = ` command` #不建议使用倒引号，不能嵌套使用\n")])])]),t("h1",{attrs:{id:"reference-links"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reference-links"}},[a._v("#")]),a._v(" Reference Links")]),a._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"http://note.youdao.com/noteshare?id=b7006c9637c694fc088531a7e3d1fa46",target:"_blank",rel:"noopener noreferrer"}},[a._v("linux shell quick start"),t("OutboundLink")],1)])]),a._v(" "),t("li",[t("p",[t("a",{attrs:{href:"http://note.youdao.com/noteshare?id=255a7f4991e565426e4ae942b7287da0",target:"_blank",rel:"noopener noreferrer"}},[a._v("common commands"),t("OutboundLink")],1)])]),a._v(" "),t("li",[t("p",[t("a",{attrs:{href:"http://note.youdao.com/noteshare?id=3a26f3d2ce9cdd864d1b238ceecdaba3",target:"_blank",rel:"noopener noreferrer"}},[a._v("shell debug"),t("OutboundLink")],1)])])])])}),[],!1,null,null,null);e.default=n.exports}}]);